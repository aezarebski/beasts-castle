#+title: Build script
#+Time-stamp: <Last modified: 2022-09-09 11:16:03>
#+startup: overview
#+OPTIONS: toc:2

The [[file:./build.xml][=build.xml=]] build script described here has provided the basic structure for
many [[http://www.beast2.org/][BEAST2]] packages. Just download [[https://github.com/aezarebski/myrmidons/blob/main/build.xml][this file]] and run =ant skeleton= to get
started! This script was initially written by [[https://github.com/tgvaughan][Tim Vaughan]]. It is an [[https://ant.apache.org/][Apache Ant]]
build script, if you want to learn more about Ant, the [[https://ant.apache.org/manual/][manual]] is a great place
to start.

* Build script

** Usage

To use =build.xml=, simply copy that file into an empty directory and run =ant
skeleton= to set up the required. The resulting directory structure should look
like the following example

#+begin_example
$ tree .
.
├── build.xml
├── COPYING
├── doc
├── examples
├── lib
├── README.md
├── src
├── templates
├── test
└── version.xml

6 directories, 4 files
#+end_example

If you have additional scripts associated with your package, then you can
include them in a =scripts= directory. Those files will be included when you
=build= the package. The =scripts= directory is not generated by =skeleton=.

** Project

The build script defines [[*Property definitions][properties]] and [[*Target definitions][targets]] described in more detail below.

#+begin_src xml :tangle build.xml :noweb no-export
  <project default="build" basedir=".">

    <description>
        This build file can be used to build an existing BEAST2
        package of to create a skeleton for a new one. See the tasks
        'build' and 'skeleton'.
    </description>

    <<properties>>

    <<targets>>

  </project>
#+end_src

We can see that the default target used by Ant is the =build= target which
compiles the project but does not run the tests. The contents of the
=description= tag are printed when ant is called with the =-projecthelp= flag
(or =-p=).

** Property definitions

Note two important properties:

- the location of =beastDir= is set to =../beast2= which means that Ant will look
  for a copy of the BEAST2 as a sibling of the package directory, and
- the expected Java version is =1.8=.
- the =scripts= directory is not generated by the =skeleton= command, but this
  is where you would put any R scripts relating to your package. Files in the
  =scripts= directory will be copied into the ZIP file produced by the =build=
  task.

#+name: properties
#+begin_src xml :noweb no-export
  <!-- Source, JUnit test code and jar library locations. -->
  <property name="src" location="src"/>
  <property name="test" location="test"/>
  <property name="lib" location="lib"/>

  <!-- Location to check for local copy of beast2 repository -->
  <property name="beastDir" location="../beast2"/>

  <!-- BEAST 2 currently uses Java 1.8 -->
  <property name="sourceVersion" value="1.8"/>
  <property name="targetVersion" value="1.8"/>

  <!-- Directories necessary for all BEAST 2 packages -->
  <property name="doc" location="doc"/>
  <property name="examples" location="examples"/>
  <property name="scripts" location="scripts"/>
  <property name="templates" location="templates"/>

  <!-- BEAST branch and version to build against
       (only different for version tags because of
       a Github peculiarity) -->
  <property name="beast-branch" value="master"/>
  <property name="beast-version" value="master"/>

  <!-- Names of temporary build/test directories -->
  <property name="build" location="build"/>
  <property name="build-lib" location="build-lib"/>
  <property name="build-test" location="build-test"/>
  <property name="test-reports" location="test-reports"/>
  <property name="dist" location="dist"/>
  <property name="pack" location="${dist}/package"/>

  <<readme-path>>

  <<license-filename>>
#+end_src

*** README

People may use a variety of different markdowns for their README, the following
will look for either a vanilla =.md= file or a =.org= file to use as the README.
Since the skeleton produces a =README.md= this should be the default that gets
used.

#+name: readme-path
#+begin_src xml :noweb yes
  <condition property="readme" value="README.md" else="README.org">
    <resourceexists>
      <file file="README.md" />
    </resourceexists>
  </condition>
#+end_src

*** LICENSE

The skeleton names the license file =COPYING=, but another common name is =LICENSE=,
if the former does not exist, the latter should be used in the =build= task.

#+name: license-filename
#+begin_src xml :noweb yes
  <condition property="licenseFilename" value="COPYING" else="LICENSE">
    <resourceexists>
      <file file="COPYING" />
    </resourceexists>
  </condition>
#+end_src

** Target definitions

#+name: targets
#+begin_src xml :noweb no-export
  <!-- Prepare for compilation -->
  <target name="init">

      <available file="version.xml" property="versionAvailable"/>
      <fail unless="versionAvailable">
          ,** Required file version.xml does not exist. **
          If this is a new project, run "ant skeleton" from
          the command line to create the files required for
          your BEAST 2 package.
      </fail>

      <!-- Read package name and version from xml file -->
      <xmlproperty file="version.xml" prefix="fromVersionFile" />
      <property name="projName" value="${fromVersionFile.addon(name)}" />
      <property name="projVersion" value="${fromVersionFile.addon(version)}" />

      <mkdir dir="${build}"/>
      <mkdir dir="${build-lib}"/>
      <mkdir dir="${dist}"/>

      <copy todir="${build-lib}">
          <fileset dir="${lib}" includes="*.jar"/>
      </copy>
  </target>

  <!-- Get beast -->

  <target name="find-beast" depends="init">
      <available file="${beastDir}" property="localBeastAvailable"/>
  </target>

  <target name="build-remote-beast" depends="find-beast" unless="localBeastAvailable">
      <echo>No local copy of the beast2 source found at ${beastDir}.</echo>
      <echo>Compiling against version ${beast-version} from GitHub.</echo>

      <property name="build-beast" location="build-beast"/>
      <mkdir dir="${build-beast}"/>

      <get src="https://github.com/CompEvol/beast2/archive/${beast-branch}.zip" dest="${build-beast}/beast.zip"/>
      <unzip src="${build-beast}/beast.zip" dest="${build-beast}"/>
      <mkdir dir="${build-beast}/beast2-${beast-version}/build"/>
      <javac target="${targetVersion}" source="${sourceVersion}"
          srcdir="${build-beast}/beast2-${beast-version}/src"
          destdir="${build-beast}/beast2-${beast-version}/build" includeantruntime="false">
          <classpath>
              <pathelement path="${classpath}"/>
              <fileset dir="${build-beast}/beast2-${beast-version}/lib" includes="*.jar"/>
          </classpath>
      </javac>
      <jar jarfile="${build-lib}/beast2.jar" basedir="${build-beast}/beast2-${beast-version}/build" />
      <copy todir="${build-lib}">
          <fileset dir="${build-beast}/beast2-${beast-version}/lib" includes="*.jar"/>
      </copy>

      <delete dir="${build-beast}" />
  </target>

  <target name="build-local-beast" depends="find-beast" if="localBeastAvailable">
      <echo>Compiling against beast2 source found at ${beastDir}.</echo>

      <property name="build-beast" location="build-beast"/>
      <mkdir dir="${build-beast}"/>

      <javac target="${targetVersion}" source="${sourceVersion}"
          srcdir="${beastDir}/src"
          destdir="${build-beast}" includeantruntime="false">
          <classpath>
              <pathelement path="${classpath}"/>
              <fileset dir="${beastDir}/lib" includes="*.jar"/>
          </classpath>
      </javac>
      <jar jarfile="${build-lib}/beast2.jar" basedir="${build-beast}" />
      <copy todir="${build-lib}">
          <fileset dir="${beastDir}/lib" includes="*.jar"/>
      </copy>

      <delete dir="${build-beast}" />
  </target>

  <target name="build-beast" depends="build-local-beast,build-remote-beast"/>

  <!-- Compile -->
  <target name="compile" depends="build-beast">
      <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${src}" destdir="${build}" includeantruntime="false">
          <classpath>
              <pathelement path="${classpath}"/>
              <fileset dir="${build-lib}" includes="*.jar"/>
          </classpath>
      </javac>
  </target>

  <target name="copy-resources" depends="compile">
      <copy todir="${build}">
          <fileset dir="${src}"
                   includes="**/*.png" />
      </copy>
  </target>

  <!-- Prepare for unit test compilation -->
  <target name="init-test" depends="init">
      <mkdir dir="${build-test}"/>
      <mkdir dir="${test-reports}"/>
  </target>

  <!-- Compile unit tests -->
  <target name="compile-test" depends="init-test,compile,copy-resources">
      <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${test}" destdir="${build-test}" includeantruntime="false">
          <classpath>
              <pathelement path="${classpath}"/>
              <pathelement path="${build}" />
              <fileset dir="${build-lib}" includes="*.jar"/>
          </classpath>
      </javac>
  </target>


  <!-- Run unit tests -->
  <target name="test" depends="compile-test">
      <junit printsummary="yes" failureproperty="testFailed" showoutput="true">
          <classpath>
              <pathelement path="${classpath}"/>
              <pathelement path="${build}" />
              <pathelement path="${build-test}" />
              <fileset dir="${build-lib}" includes="*.jar"/>
          </classpath>
          <batchtest fork="yes" todir="${test-reports}">
              <fileset dir="${test}">
                  <include name="**/*.java"/>
              </fileset>
              <formatter type="plain"/>
              <formatter type="plain" usefile="false"/> <!-- to screen -->
          </batchtest>
      </junit>

      <fail if="testFailed" status="1" message="Unit test failed."/>
  </target>

  <<target-build>>

  <!-- Revert to pristine state. -->
  <target name="clean">
      <delete dir="${build}" />
      <delete dir="${build-lib}" />
      <delete dir="${dist}" />
      <delete dir="${build-test}" />
      <delete dir="${test-reports}" />
  </target>

  <<target-skeleton>>

#+end_src

** Build

The main target for building the package is =build=.

#+name: target-build
#+begin_src xml :noweb no-export
  <target name="build" depends="compile,copy-resources">
      <property name="fullName" value="${projName}.v${projVersion}"/>

      <mkdir dir="${pack}"/>
      <mkdir dir="${pack}/examples"/>
      <mkdir dir="${pack}/scripts"/>
      <mkdir dir="${pack}/templates"/>
      <mkdir dir="${pack}/lib"/>
      <mkdir dir="${pack}/doc"/>

      <jar jarfile="${pack}/${fullName}.src.jar" basedir="${src}" />

      <mkdir dir="${lib}" />
      <copy todir="${pack}/lib">
          <fileset dir="${lib}" includes="*.jar" />
      </copy>
      <jar jarfile="${pack}/lib/${fullName}.jar" basedir="${build}" />

      <copy file="${readme}" tofile="${pack}/README" />
      <copy file="${licenseFilename}" todir="${pack}" />
      <copy todir="${pack}">
          <fileset dir="${lib}" includes="LICENSE*" />
      </copy>

      <mkdir dir="${examples}" />
      <copy todir="${pack}/examples">
          <fileset dir="${examples}" includes="**/*.xml" />
          <fileset dir="${examples}" includes="**/*.fasta" />
          <fileset dir="${examples}" includes="**/*.nexus" />
          <fileset dir="${examples}" includes="**/*.txt" />
      </copy>

      <mkdir dir="${scripts}" />
      <copy todir="${pack}/scripts">
          <fileset dir="${scripts}" includes="**/*" />
      </copy>


      <mkdir dir="${templates}" />
      <copy todir="${pack}/templates">
          <fileset dir="${templates}" includes="*.xml" />
      </copy>

      <mkdir dir="${doc}" />
      <copy todir="${pack}/doc">
          <fileset dir="${doc}" includes="*.tex,*.doc,*.lyx,*.txt"/>
      </copy>

      <copy file="version.xml" todir="${pack}" />

      <zip destfile="${dist}/${fullName}.zip" basedir="${pack}" />

      <delete dir="${pack}"/>

      <echo/>
      <echo/>
      <echo>** Package ${dist}/${fullName}.zip created successfuly! **</echo>
  </target>
#+end_src

** Skeleton

The target used to set up a new package is =skeleton=.

#+name: target-skeleton
#+begin_src xml :noweb no-export
  <target name="skeleton">

      <fail>
          <condition>
              <or>
                  <resourcecount when="gt" count="1">
                      <fileset dir="${basedir}"/>
                  </resourcecount>
                  <resourcecount when="gt" count="1">
                      <dirset dir="${basedir}"/>
                  </resourcecount>
              </or>
          </condition>

          ,** This directory contains files besides the build script. **
          You should run "ant skeleton" in a directory containing only the build script.
      </fail>

      <echo>===============================</echo>
      <echo>Create skeleton BEAST 2 package</echo>
      <echo>===============================</echo>
      <echo/>
      <echo>First, we need some information...</echo>
      <echo/>

      <basename property="defaultProjName" file="${basedir}"/>

      <input addproperty="projName" defaultvalue="${defaultProjName}">Enter package name</input>
      <input addproperty="license" defaultvalue="gpl3" validargs="gpl3,lgpl3,lgpl2.1,apache2">Select open source software license</input>
      <input addproperty="projVersion" defaultvalue="1.0.0">Enter package version</input>
      <input addproperty="beastVersionReq" defaultvalue="2.1.0">Enter minimum required BEAST 2 version</input>

      <echo>Assembling files and directory structure...</echo>

      <echo file="version.xml">&lt;addon name="${projName}" version="${projVersion}"&gt;
          &lt;depends on="beast2" atleast="${beastVersionReq}"/&gt;

          &lt;!-- Add other dependencies as necessary. --&gt;
          &lt;/addon&gt;
      </echo>

      <echo file="README.md" message="README for my package.${line.separator}"/>

      <condition property="licenseURL" value="https://www.gnu.org/licenses/gpl-3.0.txt">
          <equals arg1="${license}" arg2="gpl3"/>
      </condition>
      <condition property="licenseURL" value="https://www.gnu.org/licenses/lgpl-3.0.txt">
          <equals arg1="${license}" arg2="lgpl3"/>
      </condition>
      <condition property="licenseURL" value="https://www.gnu.org/licenses/lgpl-2.1.txt">
          <equals arg1="${license}" arg2="lgpl2.1"/>
      </condition>
      <condition property="licenseURL" value="http://www.apache.org/licenses/LICENSE-2.0.txt">
          <equals arg1="${license}" arg2="apache2"/>
      </condition>

      <get src="${licenseURL}" dest="COPYING"/>

      <mkdir dir="${src}"/>
      <mkdir dir="${test}"/>
      <mkdir dir="${lib}"/>
      <mkdir dir="${examples}"/>
      <mkdir dir="${templates}"/>
      <mkdir dir="${doc}"/>

      <echo/>
      <echo>Done.</echo>
      <echo/>
      <echo>The directory structure is as follows:</echo>
      <echo>${src} - your java source goes here</echo>
      <echo>${test} - your junit tests go here (You _are_ going to write, those, aren't you!)</echo>
      <echo>${doc} - your documentation goes here</echo>
      <echo>${examples} - your example XML scripts go here</echo>
      <echo>${templates} - your BEAUti templates go here</echo>
      <echo/>
      <echo>To build your package, just type "ant" at the command line.</echo>
      <echo/>
      <echo>To run unit tests, type "ant test".</echo>
      <echo/>
      <echo>That's it!  Happy coding!</echo>

  </target>
#+end_src
